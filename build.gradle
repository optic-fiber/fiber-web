import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
    }
}

plugins {
    id "groovy"
    id "java"
    id "war"
    id "idea"
    id "application"
    id "com.gradle.build-scan" version "2.3"
    id "org.asciidoctor.convert" version "1.5.3"
    id "org.springframework.boot" version "2.1.6.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.openapi.generator" version "4.0.2"
}
apply plugin: "propdeps"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo1.maven.org/maven2/" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation("org.codehaus.groovy:groovy-all:$groovy_version") {
        exclude group: "org.junit", module: "junit"
    }
    runtimeOnly "org.postgresql:postgresql:$postgresql_driver_version"    
    developmentOnly "org.springframework.boot:spring-boot-devtools:$spring_boot_version"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:$spring_boot_version") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    implementation("org.springframework.boot:spring-boot-starter-web:$spring_boot_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow:$spring_boot_version"
    implementation ("org.springframework.boot:spring-boot-starter-validation:$spring_boot_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    implementation ("org.springframework.boot:spring-boot-starter-groovy-templates:$spring_boot_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version"
    implementation "org.springframework.security:spring-security-web:$spring_security_version"
    implementation "org.springframework.security:spring-security-config:$spring_security_version"
    implementation ("org.springframework.security:spring-security-data:$spring_security_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    implementation ("org.springframework.boot:spring-boot-starter-data-rest:$spring_boot_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    implementation ("org.springframework.cloud:spring-cloud-starter-openfeign:$starter_openfeign_version") {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }
    
    implementation ("org.springframework.boot:spring-boot-starter-cache:$spring_boot_version" ) {
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }   
    implementation "org.zalando:problem-spring-web:$problem_spring_web_version"
    implementation "io.jsonwebtoken:jjwt-api:$json_web_token_version"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$json_web_token_version"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:$json_web_token_version"
    implementation "org.apache.commons:commons-lang3:$commons_lang3_version"
    implementation ("io.springfox:springfox-swagger2:${swagger_version}") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-swagger-ui:${swagger_version}"
    implementation "io.springfox:springfox-bean-validators:${swagger_version}"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    implementation "commons-io:commons-io:$commons_io_version"
    implementation "com.jameskleeh:excel-builder:$excel_builder_version"
    implementation "org.apache.poi:poi:$poi_version"
    implementation "org.apache.poi:poi-ooxml:$poi_version"

    testCompileOnly "junit:junit:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.junit.platform:junit-platform-commons:$junit_platform_version"
    testImplementation "org.junit.platform:junit-platform-launcher:$junit_platform_version"

    testImplementation("org.springframework.boot:spring-boot-starter-test:$spring_boot_version") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
        exclude module: "spring-boot-starter-tomcat"
        exclude group: "org.apache.tomcat.embed"
    }

    testImplementation "org.springframework.security:spring-security-test:${spring_security_version}"
    testImplementation "org.springframework.boot:spring-boot-test:${spring_boot_version}"
    testImplementation "com.xlson.groovycsv:groovycsv:${groovy_csv_version}"
    
    implementation "org.springframework.boot:spring-boot-starter-mail:$spring_boot_version"
//    implementation "org.springframework.boot:spring-boot-starter-quartz:$spring_boot_version"
//    implementation "org.springframework.boot:spring-boot-starter-webflux"
//    implementation "org.springframework.boot:spring-boot-starter-websocket"
//    implementation "javax.cache:cache-api:1.1.0"
//    implementation "org.ehcache:ehcache:3.7.1"
//    implementation "org.hibernate:hibernate-jcache"
//    implementation "org.springframework.boot:spring-boot-starter-hateoas"
//    implementation "org.springframework.data:spring-data-rest-hal-browser"
//    implementation "org.springframework.session:spring-session-core"
//    testImplementation "io.projectreactor:reactor-test"
//    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
//    implementation "org.springframework.boot:spring-boot-starter-actuator"
//    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo"
}

group "com.cheroliv"
version "0.0.1"

//sourceCompatibility = 1.8
//targetCompatibility = 12

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

springBoot {
    buildInfo()
}

ext {
    set("snippetsDir", file("build/generated-snippets"))
}

test {
    useJUnitPlatform{
        excludeEngines 'junit-vintage'
        includeEngines 'junit-jupiter'
    }
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/swagger/api.yml".toString()
    outputDir = "$buildDir/openapi".toString()
    apiPackage = "com.cheroliv.fiber.web.api"
    modelPackage = "com.cheroliv.fiber.web.api.model"
    apiFilesConstrainedTo = [""]
    modelFilesConstrainedTo = [""]
    supportingFilesConstrainedTo = ["ApiUtil.groovy"]
    configOptions = [delegatePattern: "true", title: "fiber-web"]
    validateSpec = true
    importMappings = [Problem:"org.zalando.problem.Problem"]
}

sourceSets {
    main {
        java {
            srcDir file("${project.buildDir.path}/openapi/src/main/java")
        }
    }
}
compileGroovy.dependsOn("openApiGenerate")

task dependencyReportFile(type: DependencyReportTask) {
    String outputFileName = 'dependencies.txt'
    String separator = Paths.get(System.getProperty("user.home"))
            .fileSystem.separator
    File depFile = new File("${rootProject.projectDir}${separator}${outputFileName}".toString())
    !(depFile.exists() && !depFile.directory) ?: depFile.delete()
    outputFile = file(outputFileName)
}